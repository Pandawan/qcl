#!/usr/bin/env node
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _commander = _interopRequireDefault(require("commander"));

var qcl = _interopRequireWildcard(require("./qcl"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_commander.default.version(process.env.npm_package_version || 'unknown', '-v, --version');

_commander.default.command('install <package>').option('-e --expiry <NumberUnit>', 'Use custom expiry for this package').description('Installs <package> using npm to default npm directory').alias('i').action(withErrors((...args) => {
  // No expiry argument
  if (args[1].expiry === undefined) {
    return qcl.install.default(args[0], undefined);
  }

  const parsedExpiry = qcl.parseDuration(args[1].expiry);
  return qcl.install.default(args[0], parsedExpiry);
}));

_commander.default.command('uninstall <package>').alias('u').description('Uninstalls <package> using npm').action(withErrors(qcl.uninstall.default));

_commander.default.command('cleanup').alias('c').description('Uninstalls all packages that have expired').action(withErrors(qcl.cleanup.default));

_commander.default.command('list').alias('l').description('Lists all packages installed using qcl and their expiration').action(withErrors(qcl.list.default));

_commander.default.command('set <key> <value>').alias('s').description(`Set config elements to be used by qcl ${// Add extra help if using the qcl set --help (but don't if doing qcl --help)
// Essentially this ONLY shows the help if --help is AFTER set
!/--help.*set/.test(process.argv.join(' ')) ? '\n' + qcl.set.help() : ''}`).action(withErrors((...args) => {
  if (args[0] === 'expiry' || args[0] === 'e') {
    const parsedExpiry = qcl.parseDuration(args[1]);
    return qcl.set.default(args[0], parsedExpiry);
  } else {
    return qcl.set.default(args[0], args[1]);
  }
})); // Any other argument that isn't specified


_commander.default.on('command:*', () => {
  console.error('Invalid command: %s\nSee --help for a list of available commands.', _commander.default.args.join(' '));
  process.exit(1);
});

_commander.default.parse(process.argv); // Default action if no arguments are passed


if (_commander.default.args.length === 0) {
  withErrors(qcl.cleanup.default)().catch(undefined);
}

function withErrors(command) {
  return async (...args) => {
    try {
      await command(...args);
    } catch (e) {
      console.log(e.stack);
      process.exitCode = 1;
    } // Add an extra blank line after calling a command


    console.log('');
  };
} // Export qcl as default so it can be used as a node package (as well as CLI)


var _default = qcl;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJwcm9ncmFtIiwidmVyc2lvbiIsInByb2Nlc3MiLCJlbnYiLCJucG1fcGFja2FnZV92ZXJzaW9uIiwiY29tbWFuZCIsIm9wdGlvbiIsImRlc2NyaXB0aW9uIiwiYWxpYXMiLCJhY3Rpb24iLCJ3aXRoRXJyb3JzIiwiYXJncyIsImV4cGlyeSIsInVuZGVmaW5lZCIsInFjbCIsImluc3RhbGwiLCJkZWZhdWx0IiwicGFyc2VkRXhwaXJ5IiwicGFyc2VEdXJhdGlvbiIsInVuaW5zdGFsbCIsImNsZWFudXAiLCJsaXN0IiwidGVzdCIsImFyZ3YiLCJqb2luIiwic2V0IiwiaGVscCIsIm9uIiwiY29uc29sZSIsImVycm9yIiwiZXhpdCIsInBhcnNlIiwibGVuZ3RoIiwiY2F0Y2giLCJlIiwibG9nIiwic3RhY2siLCJleGl0Q29kZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBRUE7O0FBQ0E7Ozs7OztBQUVBQSxtQkFBUUMsT0FBUixDQUFnQkMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLG1CQUFaLElBQW1DLFNBQW5ELEVBQThELGVBQTlEOztBQUVBSixtQkFDR0ssT0FESCxDQUNXLG1CQURYLEVBRUdDLE1BRkgsQ0FFVSwwQkFGVixFQUVzQyxvQ0FGdEMsRUFHR0MsV0FISCxDQUdlLHVEQUhmLEVBSUdDLEtBSkgsQ0FJUyxHQUpULEVBS0dDLE1BTEgsQ0FNSUMsVUFBVSxDQUFDLENBQUMsR0FBR0MsSUFBSixLQUFvQjtBQUM3QjtBQUNBLE1BQUlBLElBQUksQ0FBQyxDQUFELENBQUosQ0FBUUMsTUFBUixLQUFtQkMsU0FBdkIsRUFBa0M7QUFDaEMsV0FBT0MsR0FBRyxDQUFDQyxPQUFKLENBQVlDLE9BQVosQ0FBb0JMLElBQUksQ0FBQyxDQUFELENBQXhCLEVBQTZCRSxTQUE3QixDQUFQO0FBQ0Q7O0FBRUQsUUFBTUksWUFBWSxHQUFHSCxHQUFHLENBQUNJLGFBQUosQ0FBa0JQLElBQUksQ0FBQyxDQUFELENBQUosQ0FBUUMsTUFBMUIsQ0FBckI7QUFDQSxTQUFPRSxHQUFHLENBQUNDLE9BQUosQ0FBWUMsT0FBWixDQUFvQkwsSUFBSSxDQUFDLENBQUQsQ0FBeEIsRUFBNkJNLFlBQTdCLENBQVA7QUFDRCxDQVJTLENBTmQ7O0FBaUJBakIsbUJBQ0dLLE9BREgsQ0FDVyxxQkFEWCxFQUVHRyxLQUZILENBRVMsR0FGVCxFQUdHRCxXQUhILENBR2UsZ0NBSGYsRUFJR0UsTUFKSCxDQUlVQyxVQUFVLENBQUNJLEdBQUcsQ0FBQ0ssU0FBSixDQUFjSCxPQUFmLENBSnBCOztBQU1BaEIsbUJBQ0dLLE9BREgsQ0FDVyxTQURYLEVBRUdHLEtBRkgsQ0FFUyxHQUZULEVBR0dELFdBSEgsQ0FHZSwyQ0FIZixFQUlHRSxNQUpILENBSVVDLFVBQVUsQ0FBQ0ksR0FBRyxDQUFDTSxPQUFKLENBQVlKLE9BQWIsQ0FKcEI7O0FBTUFoQixtQkFDR0ssT0FESCxDQUNXLE1BRFgsRUFFR0csS0FGSCxDQUVTLEdBRlQsRUFHR0QsV0FISCxDQUdlLDZEQUhmLEVBSUdFLE1BSkgsQ0FJVUMsVUFBVSxDQUFDSSxHQUFHLENBQUNPLElBQUosQ0FBU0wsT0FBVixDQUpwQjs7QUFNQWhCLG1CQUNHSyxPQURILENBQ1csbUJBRFgsRUFFR0csS0FGSCxDQUVTLEdBRlQsRUFHR0QsV0FISCxDQUlLLHlDQUNDO0FBQ0E7QUFDQSxDQUFDLGNBQWNlLElBQWQsQ0FBbUJwQixPQUFPLENBQUNxQixJQUFSLENBQWFDLElBQWIsQ0FBa0IsR0FBbEIsQ0FBbkIsQ0FBRCxHQUE4QyxPQUFPVixHQUFHLENBQUNXLEdBQUosQ0FBUUMsSUFBUixFQUFyRCxHQUFzRSxFQUN2RSxFQVJMLEVBVUdqQixNQVZILENBV0lDLFVBQVUsQ0FBQyxDQUFDLEdBQUdDLElBQUosS0FBb0I7QUFDN0IsTUFBSUEsSUFBSSxDQUFDLENBQUQsQ0FBSixLQUFZLFFBQVosSUFBd0JBLElBQUksQ0FBQyxDQUFELENBQUosS0FBWSxHQUF4QyxFQUE2QztBQUMzQyxVQUFNTSxZQUFZLEdBQUdILEdBQUcsQ0FBQ0ksYUFBSixDQUFrQlAsSUFBSSxDQUFDLENBQUQsQ0FBdEIsQ0FBckI7QUFDQSxXQUFPRyxHQUFHLENBQUNXLEdBQUosQ0FBUVQsT0FBUixDQUFnQkwsSUFBSSxDQUFDLENBQUQsQ0FBcEIsRUFBeUJNLFlBQXpCLENBQVA7QUFDRCxHQUhELE1BR087QUFDTCxXQUFPSCxHQUFHLENBQUNXLEdBQUosQ0FBUVQsT0FBUixDQUFnQkwsSUFBSSxDQUFDLENBQUQsQ0FBcEIsRUFBeUJBLElBQUksQ0FBQyxDQUFELENBQTdCLENBQVA7QUFDRDtBQUNGLENBUFMsQ0FYZCxFLENBcUJBOzs7QUFDQVgsbUJBQVEyQixFQUFSLENBQVcsV0FBWCxFQUF3QixNQUFNO0FBQzVCQyxFQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FDRSxtRUFERixFQUVFN0IsbUJBQVFXLElBQVIsQ0FBYWEsSUFBYixDQUFrQixHQUFsQixDQUZGO0FBSUF0QixFQUFBQSxPQUFPLENBQUM0QixJQUFSLENBQWEsQ0FBYjtBQUNELENBTkQ7O0FBUUE5QixtQkFBUStCLEtBQVIsQ0FBYzdCLE9BQU8sQ0FBQ3FCLElBQXRCLEUsQ0FFQTs7O0FBQ0EsSUFBSXZCLG1CQUFRVyxJQUFSLENBQWFxQixNQUFiLEtBQXdCLENBQTVCLEVBQStCO0FBQzdCdEIsRUFBQUEsVUFBVSxDQUFDSSxHQUFHLENBQUNNLE9BQUosQ0FBWUosT0FBYixDQUFWLEdBQWtDaUIsS0FBbEMsQ0FBd0NwQixTQUF4QztBQUNEOztBQUVELFNBQVNILFVBQVQsQ0FBb0JMLE9BQXBCLEVBQStEO0FBQzdELFNBQU8sT0FBTyxHQUFHTSxJQUFWLEtBQTBCO0FBQy9CLFFBQUk7QUFDRixZQUFNTixPQUFPLENBQUMsR0FBR00sSUFBSixDQUFiO0FBQ0QsS0FGRCxDQUVFLE9BQU91QixDQUFQLEVBQVU7QUFDVk4sTUFBQUEsT0FBTyxDQUFDTyxHQUFSLENBQVlELENBQUMsQ0FBQ0UsS0FBZDtBQUNBbEMsTUFBQUEsT0FBTyxDQUFDbUMsUUFBUixHQUFtQixDQUFuQjtBQUNELEtBTjhCLENBTy9COzs7QUFDQVQsSUFBQUEsT0FBTyxDQUFDTyxHQUFSLENBQVksRUFBWjtBQUNELEdBVEQ7QUFVRCxDLENBRUQ7OztlQUNlckIsRyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcclxuXHJcbmltcG9ydCBwcm9ncmFtIGZyb20gJ2NvbW1hbmRlcic7XHJcbmltcG9ydCAqIGFzIHFjbCBmcm9tICcuL3FjbCc7XHJcblxyXG5wcm9ncmFtLnZlcnNpb24ocHJvY2Vzcy5lbnYubnBtX3BhY2thZ2VfdmVyc2lvbiB8fCAndW5rbm93bicsICctdiwgLS12ZXJzaW9uJyk7XHJcblxyXG5wcm9ncmFtXHJcbiAgLmNvbW1hbmQoJ2luc3RhbGwgPHBhY2thZ2U+JylcclxuICAub3B0aW9uKCctZSAtLWV4cGlyeSA8TnVtYmVyVW5pdD4nLCAnVXNlIGN1c3RvbSBleHBpcnkgZm9yIHRoaXMgcGFja2FnZScpXHJcbiAgLmRlc2NyaXB0aW9uKCdJbnN0YWxscyA8cGFja2FnZT4gdXNpbmcgbnBtIHRvIGRlZmF1bHQgbnBtIGRpcmVjdG9yeScpXHJcbiAgLmFsaWFzKCdpJylcclxuICAuYWN0aW9uKFxyXG4gICAgd2l0aEVycm9ycygoLi4uYXJnczogYW55W10pID0+IHtcclxuICAgICAgLy8gTm8gZXhwaXJ5IGFyZ3VtZW50XHJcbiAgICAgIGlmIChhcmdzWzFdLmV4cGlyeSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIHFjbC5pbnN0YWxsLmRlZmF1bHQoYXJnc1swXSwgdW5kZWZpbmVkKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgcGFyc2VkRXhwaXJ5ID0gcWNsLnBhcnNlRHVyYXRpb24oYXJnc1sxXS5leHBpcnkpO1xyXG4gICAgICByZXR1cm4gcWNsLmluc3RhbGwuZGVmYXVsdChhcmdzWzBdLCBwYXJzZWRFeHBpcnkpO1xyXG4gICAgfSlcclxuICApO1xyXG5cclxucHJvZ3JhbVxyXG4gIC5jb21tYW5kKCd1bmluc3RhbGwgPHBhY2thZ2U+JylcclxuICAuYWxpYXMoJ3UnKVxyXG4gIC5kZXNjcmlwdGlvbignVW5pbnN0YWxscyA8cGFja2FnZT4gdXNpbmcgbnBtJylcclxuICAuYWN0aW9uKHdpdGhFcnJvcnMocWNsLnVuaW5zdGFsbC5kZWZhdWx0KSk7XHJcblxyXG5wcm9ncmFtXHJcbiAgLmNvbW1hbmQoJ2NsZWFudXAnKVxyXG4gIC5hbGlhcygnYycpXHJcbiAgLmRlc2NyaXB0aW9uKCdVbmluc3RhbGxzIGFsbCBwYWNrYWdlcyB0aGF0IGhhdmUgZXhwaXJlZCcpXHJcbiAgLmFjdGlvbih3aXRoRXJyb3JzKHFjbC5jbGVhbnVwLmRlZmF1bHQpKTtcclxuXHJcbnByb2dyYW1cclxuICAuY29tbWFuZCgnbGlzdCcpXHJcbiAgLmFsaWFzKCdsJylcclxuICAuZGVzY3JpcHRpb24oJ0xpc3RzIGFsbCBwYWNrYWdlcyBpbnN0YWxsZWQgdXNpbmcgcWNsIGFuZCB0aGVpciBleHBpcmF0aW9uJylcclxuICAuYWN0aW9uKHdpdGhFcnJvcnMocWNsLmxpc3QuZGVmYXVsdCkpO1xyXG5cclxucHJvZ3JhbVxyXG4gIC5jb21tYW5kKCdzZXQgPGtleT4gPHZhbHVlPicpXHJcbiAgLmFsaWFzKCdzJylcclxuICAuZGVzY3JpcHRpb24oXHJcbiAgICBgU2V0IGNvbmZpZyBlbGVtZW50cyB0byBiZSB1c2VkIGJ5IHFjbCAke1xyXG4gICAgICAvLyBBZGQgZXh0cmEgaGVscCBpZiB1c2luZyB0aGUgcWNsIHNldCAtLWhlbHAgKGJ1dCBkb24ndCBpZiBkb2luZyBxY2wgLS1oZWxwKVxyXG4gICAgICAvLyBFc3NlbnRpYWxseSB0aGlzIE9OTFkgc2hvd3MgdGhlIGhlbHAgaWYgLS1oZWxwIGlzIEFGVEVSIHNldFxyXG4gICAgICAhLy0taGVscC4qc2V0Ly50ZXN0KHByb2Nlc3MuYXJndi5qb2luKCcgJykpID8gJ1xcbicgKyBxY2wuc2V0LmhlbHAoKSA6ICcnXHJcbiAgICB9YFxyXG4gIClcclxuICAuYWN0aW9uKFxyXG4gICAgd2l0aEVycm9ycygoLi4uYXJnczogYW55W10pID0+IHtcclxuICAgICAgaWYgKGFyZ3NbMF0gPT09ICdleHBpcnknIHx8IGFyZ3NbMF0gPT09ICdlJykge1xyXG4gICAgICAgIGNvbnN0IHBhcnNlZEV4cGlyeSA9IHFjbC5wYXJzZUR1cmF0aW9uKGFyZ3NbMV0pO1xyXG4gICAgICAgIHJldHVybiBxY2wuc2V0LmRlZmF1bHQoYXJnc1swXSwgcGFyc2VkRXhwaXJ5KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gcWNsLnNldC5kZWZhdWx0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICk7XHJcblxyXG4vLyBBbnkgb3RoZXIgYXJndW1lbnQgdGhhdCBpc24ndCBzcGVjaWZpZWRcclxucHJvZ3JhbS5vbignY29tbWFuZDoqJywgKCkgPT4ge1xyXG4gIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAnSW52YWxpZCBjb21tYW5kOiAlc1xcblNlZSAtLWhlbHAgZm9yIGEgbGlzdCBvZiBhdmFpbGFibGUgY29tbWFuZHMuJyxcclxuICAgIHByb2dyYW0uYXJncy5qb2luKCcgJylcclxuICApO1xyXG4gIHByb2Nlc3MuZXhpdCgxKTtcclxufSk7XHJcblxyXG5wcm9ncmFtLnBhcnNlKHByb2Nlc3MuYXJndik7XHJcblxyXG4vLyBEZWZhdWx0IGFjdGlvbiBpZiBubyBhcmd1bWVudHMgYXJlIHBhc3NlZFxyXG5pZiAocHJvZ3JhbS5hcmdzLmxlbmd0aCA9PT0gMCkge1xyXG4gIHdpdGhFcnJvcnMocWNsLmNsZWFudXAuZGVmYXVsdCkoKS5jYXRjaCh1bmRlZmluZWQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB3aXRoRXJyb3JzKGNvbW1hbmQ6ICguLi5hcmdzOiBhbnlbXSkgPT4gUHJvbWlzZTxhbnk+KSB7XHJcbiAgcmV0dXJuIGFzeW5jICguLi5hcmdzOiBhbnlbXSkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgY29tbWFuZCguLi5hcmdzKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgY29uc29sZS5sb2coZS5zdGFjayk7XHJcbiAgICAgIHByb2Nlc3MuZXhpdENvZGUgPSAxO1xyXG4gICAgfVxyXG4gICAgLy8gQWRkIGFuIGV4dHJhIGJsYW5rIGxpbmUgYWZ0ZXIgY2FsbGluZyBhIGNvbW1hbmRcclxuICAgIGNvbnNvbGUubG9nKCcnKTtcclxuICB9O1xyXG59XHJcblxyXG4vLyBFeHBvcnQgcWNsIGFzIGRlZmF1bHQgc28gaXQgY2FuIGJlIHVzZWQgYXMgYSBub2RlIHBhY2thZ2UgKGFzIHdlbGwgYXMgQ0xJKVxyXG5leHBvcnQgZGVmYXVsdCBxY2w7XHJcbiJdfQ==