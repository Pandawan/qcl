"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = uninstall;

var _data = require("../universal/data");

var _utils = require("../universal/utils");

/**
 * Uninstalls the given package
 * @param pkgName The package to uninstall
 */
async function uninstall(pkgName) {
  if (!pkgName) {
    throw new Error('No package was given.');
  } // Fetch data


  const {
    packages
  } = (0, _data.getData)(); // Check that this package is installed.

  const index = packages.findIndex(p => p.name === pkgName);

  if (index < 0) {
    throw new Error(`Package "${pkgName}" is not installed.`);
  }

  console.log(`Uninstalling "${pkgName}"`); // Actually uninstall the package

  await uninstallPackage(pkgName); // Remove the package from the list

  const newPackages = packages.filter((v, i) => i !== index); // Update the data file with changes

  (0, _data.setSingleData)('packages', newPackages);
  console.log(`Package "${pkgName}" was successfully uninstalled.`);
}

async function uninstallPackage(pkgName) {
  const {
    package_manager
  } = (0, _data.getData)();

  if (package_manager === 'npm') {
    // TODO: Allow for extra parameters such as --global and --saveDev
    // TODO: Does sudo work on Windows?
    console.log((await (0, _utils.getAsync)(`sudo npm uninstall ${pkgName} -g`)));
  } else if (package_manager === 'yarn') {
    console.log((await (0, _utils.getAsync)(`sudo yarn global remove ${pkgName}`)));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy91bmluc3RhbGwudHMiXSwibmFtZXMiOlsidW5pbnN0YWxsIiwicGtnTmFtZSIsIkVycm9yIiwicGFja2FnZXMiLCJpbmRleCIsImZpbmRJbmRleCIsInAiLCJuYW1lIiwiY29uc29sZSIsImxvZyIsInVuaW5zdGFsbFBhY2thZ2UiLCJuZXdQYWNrYWdlcyIsImZpbHRlciIsInYiLCJpIiwicGFja2FnZV9tYW5hZ2VyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7Ozs7QUFJZSxlQUFlQSxTQUFmLENBQXlCQyxPQUF6QixFQUEwQztBQUN2RCxNQUFJLENBQUNBLE9BQUwsRUFBYztBQUNaLFVBQU0sSUFBSUMsS0FBSixDQUFVLHVCQUFWLENBQU47QUFDRCxHQUhzRCxDQUt2RDs7O0FBQ0EsUUFBTTtBQUFFQyxJQUFBQTtBQUFGLE1BQWUsb0JBQXJCLENBTnVELENBUXZEOztBQUNBLFFBQU1DLEtBQUssR0FBR0QsUUFBUSxDQUFDRSxTQUFULENBQW1CQyxDQUFDLElBQUlBLENBQUMsQ0FBQ0MsSUFBRixLQUFXTixPQUFuQyxDQUFkOztBQUNBLE1BQUlHLEtBQUssR0FBRyxDQUFaLEVBQWU7QUFDYixVQUFNLElBQUlGLEtBQUosQ0FBVyxZQUFXRCxPQUFRLHFCQUE5QixDQUFOO0FBQ0Q7O0FBRURPLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLGlCQUFnQlIsT0FBUSxHQUFyQyxFQWR1RCxDQWdCdkQ7O0FBQ0EsUUFBTVMsZ0JBQWdCLENBQUNULE9BQUQsQ0FBdEIsQ0FqQnVELENBbUJ2RDs7QUFDQSxRQUFNVSxXQUFXLEdBQUdSLFFBQVEsQ0FBQ1MsTUFBVCxDQUFnQixDQUFDQyxDQUFELEVBQUlDLENBQUosS0FBVUEsQ0FBQyxLQUFLVixLQUFoQyxDQUFwQixDQXBCdUQsQ0FzQnZEOztBQUNBLDJCQUFjLFVBQWQsRUFBMEJPLFdBQTFCO0FBRUFILEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLFlBQVdSLE9BQVEsaUNBQWhDO0FBQ0Q7O0FBRUQsZUFBZVMsZ0JBQWYsQ0FBZ0NULE9BQWhDLEVBQWdFO0FBQzlELFFBQU07QUFBRWMsSUFBQUE7QUFBRixNQUFzQixvQkFBNUI7O0FBQ0EsTUFBSUEsZUFBZSxLQUFLLEtBQXhCLEVBQStCO0FBQzdCO0FBQ0E7QUFDQVAsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLEVBQVksTUFBTSxxQkFBVSxzQkFBcUJSLE9BQVEsS0FBdkMsQ0FBbEI7QUFDRCxHQUpELE1BSU8sSUFBSWMsZUFBZSxLQUFLLE1BQXhCLEVBQWdDO0FBQ3JDUCxJQUFBQSxPQUFPLENBQUNDLEdBQVIsRUFBWSxNQUFNLHFCQUFVLDJCQUEwQlIsT0FBUSxFQUE1QyxDQUFsQjtBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXREYXRhLCBzZXRTaW5nbGVEYXRhIH0gZnJvbSAnLi4vdW5pdmVyc2FsL2RhdGEnO1xyXG5pbXBvcnQgeyBnZXRBc3luYyB9IGZyb20gJy4uL3VuaXZlcnNhbC91dGlscyc7XHJcblxyXG4vKipcclxuICogVW5pbnN0YWxscyB0aGUgZ2l2ZW4gcGFja2FnZVxyXG4gKiBAcGFyYW0gcGtnTmFtZSBUaGUgcGFja2FnZSB0byB1bmluc3RhbGxcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIHVuaW5zdGFsbChwa2dOYW1lOiBzdHJpbmcpIHtcclxuICBpZiAoIXBrZ05hbWUpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignTm8gcGFja2FnZSB3YXMgZ2l2ZW4uJyk7XHJcbiAgfVxyXG5cclxuICAvLyBGZXRjaCBkYXRhXHJcbiAgY29uc3QgeyBwYWNrYWdlcyB9ID0gZ2V0RGF0YSgpO1xyXG5cclxuICAvLyBDaGVjayB0aGF0IHRoaXMgcGFja2FnZSBpcyBpbnN0YWxsZWQuXHJcbiAgY29uc3QgaW5kZXggPSBwYWNrYWdlcy5maW5kSW5kZXgocCA9PiBwLm5hbWUgPT09IHBrZ05hbWUpO1xyXG4gIGlmIChpbmRleCA8IDApIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgUGFja2FnZSBcIiR7cGtnTmFtZX1cIiBpcyBub3QgaW5zdGFsbGVkLmApO1xyXG4gIH1cclxuXHJcbiAgY29uc29sZS5sb2coYFVuaW5zdGFsbGluZyBcIiR7cGtnTmFtZX1cImApO1xyXG5cclxuICAvLyBBY3R1YWxseSB1bmluc3RhbGwgdGhlIHBhY2thZ2VcclxuICBhd2FpdCB1bmluc3RhbGxQYWNrYWdlKHBrZ05hbWUpO1xyXG5cclxuICAvLyBSZW1vdmUgdGhlIHBhY2thZ2UgZnJvbSB0aGUgbGlzdFxyXG4gIGNvbnN0IG5ld1BhY2thZ2VzID0gcGFja2FnZXMuZmlsdGVyKCh2LCBpKSA9PiBpICE9PSBpbmRleCk7XHJcblxyXG4gIC8vIFVwZGF0ZSB0aGUgZGF0YSBmaWxlIHdpdGggY2hhbmdlc1xyXG4gIHNldFNpbmdsZURhdGEoJ3BhY2thZ2VzJywgbmV3UGFja2FnZXMpO1xyXG5cclxuICBjb25zb2xlLmxvZyhgUGFja2FnZSBcIiR7cGtnTmFtZX1cIiB3YXMgc3VjY2Vzc2Z1bGx5IHVuaW5zdGFsbGVkLmApO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiB1bmluc3RhbGxQYWNrYWdlKHBrZ05hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGNvbnN0IHsgcGFja2FnZV9tYW5hZ2VyIH0gPSBnZXREYXRhKCk7XHJcbiAgaWYgKHBhY2thZ2VfbWFuYWdlciA9PT0gJ25wbScpIHtcclxuICAgIC8vIFRPRE86IEFsbG93IGZvciBleHRyYSBwYXJhbWV0ZXJzIHN1Y2ggYXMgLS1nbG9iYWwgYW5kIC0tc2F2ZURldlxyXG4gICAgLy8gVE9ETzogRG9lcyBzdWRvIHdvcmsgb24gV2luZG93cz9cclxuICAgIGNvbnNvbGUubG9nKGF3YWl0IGdldEFzeW5jKGBzdWRvIG5wbSB1bmluc3RhbGwgJHtwa2dOYW1lfSAtZ2ApKTtcclxuICB9IGVsc2UgaWYgKHBhY2thZ2VfbWFuYWdlciA9PT0gJ3lhcm4nKSB7XHJcbiAgICBjb25zb2xlLmxvZyhhd2FpdCBnZXRBc3luYyhgc3VkbyB5YXJuIGdsb2JhbCByZW1vdmUgJHtwa2dOYW1lfWApKTtcclxuICB9XHJcbn1cclxuIl19