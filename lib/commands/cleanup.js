"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cleanup;

var _moment = _interopRequireDefault(require("moment"));

var _data = require("../universal/data");

var _uninstall = _interopRequireDefault(require("./uninstall"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Runs basic qcl tasks and cleanup
 */
async function cleanup() {
  console.log('Cleaning up old packages.'); // Cleanup the data file

  cleanupDataFile(); // Cleanup/Uninstall expired packages

  await cleanupPackages();
}
/**
 * Uninstall expired packages
 */


async function cleanupPackages() {
  const data = (0, _data.getData)();

  try {
    // Get a list of packages that have expired
    const packagesToUninstall = data.packages.filter(pkg => {
      // If the install date + 48 hours < current date, uninstall this package
      if (pkg.expiry) {
        return (0, _moment.default)(pkg.installed).add(pkg.expiry[0], pkg.expiry[1]).isBefore((0, _moment.default)());
      } else {
        return (0, _moment.default)(pkg.installed).add(data.expiry[0], data.expiry[1]).isBefore((0, _moment.default)());
      }
    }); // Loop through the list of packages and uninstall them

    for (const pkg of packagesToUninstall) {
      await (0, _uninstall.default)(pkg.name);
    }

    console.log('Successfully cleaned up packages.');
  } catch (error) {
    throw error;
  }
}
/**
 * Cleans Up/Upgrades the data file by removing useless/outdated properties.
 * This does it dynamically by keeping all of the properties that are in common with defaultData.
 */


function cleanupDataFile() {
  const data = (0, _data.getData)(); // Get common properties between defaultData and currentData (data)

  const commonProperties = Object.keys((0, _data.defaultData)()).filter(key => {
    return key in data;
  }); // Only keep the ones that are in common

  commonProperties.forEach(property => {
    const value = data[property];
    (0, _data.setSingleData)(property, value);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9jbGVhbnVwLnRzIl0sIm5hbWVzIjpbImNsZWFudXAiLCJjb25zb2xlIiwibG9nIiwiY2xlYW51cERhdGFGaWxlIiwiY2xlYW51cFBhY2thZ2VzIiwiZGF0YSIsInBhY2thZ2VzVG9Vbmluc3RhbGwiLCJwYWNrYWdlcyIsImZpbHRlciIsInBrZyIsImV4cGlyeSIsImluc3RhbGxlZCIsImFkZCIsImlzQmVmb3JlIiwibmFtZSIsImVycm9yIiwiY29tbW9uUHJvcGVydGllcyIsIk9iamVjdCIsImtleXMiLCJrZXkiLCJmb3JFYWNoIiwicHJvcGVydHkiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOztBQUVBOzs7O0FBRUE7OztBQUdlLGVBQWVBLE9BQWYsR0FBeUI7QUFDdENDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLDJCQUFaLEVBRHNDLENBR3RDOztBQUNBQyxFQUFBQSxlQUFlLEdBSnVCLENBTXRDOztBQUNBLFFBQU1DLGVBQWUsRUFBckI7QUFDRDtBQUVEOzs7OztBQUdBLGVBQWVBLGVBQWYsR0FBaUM7QUFDL0IsUUFBTUMsSUFBSSxHQUFHLG9CQUFiOztBQUNBLE1BQUk7QUFDRjtBQUNBLFVBQU1DLG1CQUFtQixHQUFHRCxJQUFJLENBQUNFLFFBQUwsQ0FBY0MsTUFBZCxDQUFxQkMsR0FBRyxJQUFJO0FBQ3REO0FBQ0EsVUFBSUEsR0FBRyxDQUFDQyxNQUFSLEVBQWdCO0FBQ2QsZUFBTyxxQkFBT0QsR0FBRyxDQUFDRSxTQUFYLEVBQ0pDLEdBREksQ0FDQUgsR0FBRyxDQUFDQyxNQUFKLENBQVcsQ0FBWCxDQURBLEVBQ2VELEdBQUcsQ0FBQ0MsTUFBSixDQUFXLENBQVgsQ0FEZixFQUVKRyxRQUZJLENBRUssc0JBRkwsQ0FBUDtBQUdELE9BSkQsTUFJTztBQUNMLGVBQU8scUJBQU9KLEdBQUcsQ0FBQ0UsU0FBWCxFQUNKQyxHQURJLENBQ0FQLElBQUksQ0FBQ0ssTUFBTCxDQUFZLENBQVosQ0FEQSxFQUNnQkwsSUFBSSxDQUFDSyxNQUFMLENBQVksQ0FBWixDQURoQixFQUVKRyxRQUZJLENBRUssc0JBRkwsQ0FBUDtBQUdEO0FBQ0YsS0FYMkIsQ0FBNUIsQ0FGRSxDQWVGOztBQUNBLFNBQUssTUFBTUosR0FBWCxJQUFrQkgsbUJBQWxCLEVBQXVDO0FBQ3JDLFlBQU0sd0JBQVVHLEdBQUcsQ0FBQ0ssSUFBZCxDQUFOO0FBQ0Q7O0FBRURiLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLG1DQUFaO0FBQ0QsR0FyQkQsQ0FxQkUsT0FBT2EsS0FBUCxFQUFjO0FBQ2QsVUFBTUEsS0FBTjtBQUNEO0FBQ0Y7QUFFRDs7Ozs7O0FBSUEsU0FBU1osZUFBVCxHQUEyQjtBQUN6QixRQUFNRSxJQUFJLEdBQUcsb0JBQWIsQ0FEeUIsQ0FFekI7O0FBQ0EsUUFBTVcsZ0JBQWdCLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZLHdCQUFaLEVBQTJCVixNQUEzQixDQUFrQ1csR0FBRyxJQUFJO0FBQ2hFLFdBQU9BLEdBQUcsSUFBSWQsSUFBZDtBQUNELEdBRndCLENBQXpCLENBSHlCLENBT3pCOztBQUNBVyxFQUFBQSxnQkFBZ0IsQ0FBQ0ksT0FBakIsQ0FBMEJDLFFBQUQsSUFBc0I7QUFDN0MsVUFBTUMsS0FBSyxHQUFJakIsSUFBRCxDQUFjZ0IsUUFBZCxDQUFkO0FBQ0EsNkJBQWNBLFFBQWQsRUFBd0JDLEtBQXhCO0FBQ0QsR0FIRDtBQUlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5cclxuaW1wb3J0IHsgZGVmYXVsdERhdGEsIGdldERhdGEsIHNldFNpbmdsZURhdGEgfSBmcm9tICcuLi91bml2ZXJzYWwvZGF0YSc7XHJcbmltcG9ydCB7IElEYXRhIH0gZnJvbSAnLi4vdW5pdmVyc2FsL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgdW5pbnN0YWxsIGZyb20gJy4vdW5pbnN0YWxsJztcclxuXHJcbi8qKlxyXG4gKiBSdW5zIGJhc2ljIHFjbCB0YXNrcyBhbmQgY2xlYW51cFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gY2xlYW51cCgpIHtcclxuICBjb25zb2xlLmxvZygnQ2xlYW5pbmcgdXAgb2xkIHBhY2thZ2VzLicpO1xyXG5cclxuICAvLyBDbGVhbnVwIHRoZSBkYXRhIGZpbGVcclxuICBjbGVhbnVwRGF0YUZpbGUoKTtcclxuXHJcbiAgLy8gQ2xlYW51cC9Vbmluc3RhbGwgZXhwaXJlZCBwYWNrYWdlc1xyXG4gIGF3YWl0IGNsZWFudXBQYWNrYWdlcygpO1xyXG59XHJcblxyXG4vKipcclxuICogVW5pbnN0YWxsIGV4cGlyZWQgcGFja2FnZXNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGNsZWFudXBQYWNrYWdlcygpIHtcclxuICBjb25zdCBkYXRhID0gZ2V0RGF0YSgpO1xyXG4gIHRyeSB7XHJcbiAgICAvLyBHZXQgYSBsaXN0IG9mIHBhY2thZ2VzIHRoYXQgaGF2ZSBleHBpcmVkXHJcbiAgICBjb25zdCBwYWNrYWdlc1RvVW5pbnN0YWxsID0gZGF0YS5wYWNrYWdlcy5maWx0ZXIocGtnID0+IHtcclxuICAgICAgLy8gSWYgdGhlIGluc3RhbGwgZGF0ZSArIDQ4IGhvdXJzIDwgY3VycmVudCBkYXRlLCB1bmluc3RhbGwgdGhpcyBwYWNrYWdlXHJcbiAgICAgIGlmIChwa2cuZXhwaXJ5KSB7XHJcbiAgICAgICAgcmV0dXJuIG1vbWVudChwa2cuaW5zdGFsbGVkKVxyXG4gICAgICAgICAgLmFkZChwa2cuZXhwaXJ5WzBdLCBwa2cuZXhwaXJ5WzFdKVxyXG4gICAgICAgICAgLmlzQmVmb3JlKG1vbWVudCgpKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbW9tZW50KHBrZy5pbnN0YWxsZWQpXHJcbiAgICAgICAgICAuYWRkKGRhdGEuZXhwaXJ5WzBdLCBkYXRhLmV4cGlyeVsxXSlcclxuICAgICAgICAgIC5pc0JlZm9yZShtb21lbnQoKSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgbGlzdCBvZiBwYWNrYWdlcyBhbmQgdW5pbnN0YWxsIHRoZW1cclxuICAgIGZvciAoY29uc3QgcGtnIG9mIHBhY2thZ2VzVG9Vbmluc3RhbGwpIHtcclxuICAgICAgYXdhaXQgdW5pbnN0YWxsKHBrZy5uYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZygnU3VjY2Vzc2Z1bGx5IGNsZWFuZWQgdXAgcGFja2FnZXMuJyk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENsZWFucyBVcC9VcGdyYWRlcyB0aGUgZGF0YSBmaWxlIGJ5IHJlbW92aW5nIHVzZWxlc3Mvb3V0ZGF0ZWQgcHJvcGVydGllcy5cclxuICogVGhpcyBkb2VzIGl0IGR5bmFtaWNhbGx5IGJ5IGtlZXBpbmcgYWxsIG9mIHRoZSBwcm9wZXJ0aWVzIHRoYXQgYXJlIGluIGNvbW1vbiB3aXRoIGRlZmF1bHREYXRhLlxyXG4gKi9cclxuZnVuY3Rpb24gY2xlYW51cERhdGFGaWxlKCkge1xyXG4gIGNvbnN0IGRhdGEgPSBnZXREYXRhKCk7XHJcbiAgLy8gR2V0IGNvbW1vbiBwcm9wZXJ0aWVzIGJldHdlZW4gZGVmYXVsdERhdGEgYW5kIGN1cnJlbnREYXRhIChkYXRhKVxyXG4gIGNvbnN0IGNvbW1vblByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhkZWZhdWx0RGF0YSgpKS5maWx0ZXIoa2V5ID0+IHtcclxuICAgIHJldHVybiBrZXkgaW4gZGF0YTtcclxuICB9KTtcclxuXHJcbiAgLy8gT25seSBrZWVwIHRoZSBvbmVzIHRoYXQgYXJlIGluIGNvbW1vblxyXG4gIGNvbW1vblByb3BlcnRpZXMuZm9yRWFjaCgocHJvcGVydHk6IHN0cmluZykgPT4ge1xyXG4gICAgY29uc3QgdmFsdWUgPSAoZGF0YSBhcyBhbnkpW3Byb3BlcnR5XTtcclxuICAgIHNldFNpbmdsZURhdGEocHJvcGVydHksIHZhbHVlKTtcclxuICB9KTtcclxufVxyXG4iXX0=